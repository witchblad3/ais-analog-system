<?php
namespace App\Actions;

use App\Models\Product;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

class DetermineAnalogsAction
{
    /**
     * Возвращает коллекцию аналогов (Product), у которых совпадает
     * не менее 50% уникальных параметров (по объединённому ключу).
     */
    public function execute(Product $base): Collection
    {
        $baseId = $base->id;

        // Считаем число уникальных параметров (по объединённому ключу) у базового
        $totalParams = DB::table('product_characteristic_values as pcv_base')
            ->select(
                DB::raw('COUNT(DISTINCT COALESCE(pcv_base.characteristic_key_mapping_id, pcv_base.characteristic_id))')
            )
            ->where('pcv_base.product_id', $baseId)
            ->valueRaw();

        if ($totalParams == 0) {
            return collect();
        }

        $minMatches = (int) ceil($totalParams * 0.5);

        // Один запрос: джойним базовые «ключ-значение» с остальными
        $matches = DB::table('product_characteristic_values as base')
            ->join('product_characteristic_values as other', function($join) use($baseId) {
                $join->on(
                    DB::raw('COALESCE(base.characteristic_key_mapping_id, base.characteristic_id)'),
                    '=',
                    DB::raw('COALESCE(other.characteristic_key_mapping_id, other.characteristic_id)')
                )->on('base.value', '=', 'other.value');
            })
            ->where('base.product_id', $baseId)
            ->where('other.product_id', '<>', $baseId)
            ->select([
                'other.product_id',
                DB::raw('COUNT(*) as match_count'),
            ])
            ->groupBy('other.product_id')
            ->having('match_count', '>=', $minMatches)
            ->orderByDesc('match_count')
            ->get();

        if ($matches->isEmpty()) {
            return collect();
        }

        // Достаём модели продуктов и впихиваем им match_count
        $ids = $matches->pluck('product_id')->all();
        $products = Product::whereIn('id', $ids)
            ->get()
            ->keyBy('id');

        return $matches->map(function($row) use($products) {
            if ($p = $products->get($row->product_id)) {
                $p->match_count = (int)$row->match_count;
                return $p;
            }
        })->filter();
    }

    /**
     *  Процент совпадения = match_count / totalParams * 100
     */
    public function matchPercent(Product $base, Product $analog): int
    {
        $matched = $analog->match_count ?? 0;

        $total = DB::table('product_characteristic_values')
            ->where('product_id', $base->id)
            ->select(DB::raw('COUNT(DISTINCT COALESCE(characteristic_key_mapping_id, characteristic_id))'))
            ->valueRaw();

        return $total
            ? (int) round($matched / $total * 100)
            : 0;
    }
}
